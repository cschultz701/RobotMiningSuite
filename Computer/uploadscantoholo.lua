--OpenComputers Mining v1.0
--uploadscantoholo.lua v1.0
--Takes files generated during scan and displays the relative positions using the hologram projector.

--for use with geoscan.lua v2.0

--Takes the files generated by geoscan2 and represents the data on two holograms.
--Holograms are limited to 32 voxels in the y axis, while the geolyzer has 64 in
--the y axis. The bottom hologram handles everything below the center point and
--the top hologram handles everything above the center point.
--Does not automatically figure out how many files of each type are present, so 
--the user must manually tell the program how many of each file type exist in 
--the scan directory.
--Requires the coorindates.txt file in order to determine where the center point
--is, then it determines where each point is relative to the center point so that
--the center point of the scan is always at the center point of the hologram pair.

local component = require("component")

--CONSTANTS========================================
local holo = component.proxy(component.get("f07"))
local holo2 = component.proxy(component.get("899"))

--RARE CONSTANTS===================================
local pausefreq=20

local scandirectory = "scanresults/"
local lootfiletype = ".txt"

local lfilebase = "scanValue"
local lcount = 0
local lf

--file to save air locations to
local afilebase = "scanAir"
local acount = 0
local af = assert(io.open(scandirectory .. afilebase .. acount .. lootfiletype))

--file to save water/lava locations to
local wfilebase = "scanWater"
local wcount = 0
local wf = assert(io.open(scandirectory .. wfilebase .. wcount .. lootfiletype))

local coordfilename = "coordinates"
local cf = assert(io.open(scandirectory .. coordfilename .. lootfiletype))

local holox = 48
local holoy = 32
local holoz = 48

holo.setScale(3)
holo2.setScale(3)
holo.setPaletteColor(1, 16776960)	--yellow - for loot
holo.setPaletteColor(2, 16747520)	--dark orange - for water/lava
holo.setPaletteColor(3, 128)		--dark blue - for air
holo2.setPaletteColor(1, 16776960)	--yellow - for loot
holo2.setPaletteColor(2, 16747520)	--dark orange - for water/lava
holo2.setPaletteColor(3, 128)		--dark blue - for air
--END CONSTANTS====================================

local function writetoholo(file, value)
	line = file:read("*line")
	count=0
	while not (line == nil) do
		x = tonumber(string.sub(line, 1, 5))
		y = tonumber(string.sub(line, 6, 10))
		z = tonumber(string.sub(line, 11, 15))
		if y-yorigin > 0 then
			print("Setting holo2 " .. holox/2+x-xorigin .. " " .. y-yorigin .. " " .. holoz/2+z-zorigin .. " to " .. value)
			holo2.set(holox/2+x-xorigin, y-yorigin, holoz/2+z-zorigin, value)
		else
			print("Setting holo1 " .. holox/2+x-xorigin .. " " .. holoy+y-yorigin .. " " .. holoz/2+z-zorigin .. " to " .. value)
			holo.set(holox/2+x-xorigin, holoy+y-yorigin, holoz/2+z-zorigin, value)
		end
		line = file:read("*line")
		if count >= pausefreq then
			os.sleep(3)
			count = 0
		end
		count = count + 1
	end
	file:close()
end


xorigin = math.floor(tonumber(cf:read("*line")))
yorigin = math.floor(tonumber(cf:read("*line")))
zorigin = math.floor(tonumber(cf:read("*line")))
cf:close()

print("Number of Value files: ")
val = tonumber(io.read())
print("Number of Air files: ")
air = tonumber(io.read())
print("Number of Water files: ")
wat = tonumber(io.read())

holo.clear()
holo2.clear()
for i=0,val-1 do
	lf = assert(io.open(scandirectory .. lfilebase .. i .. lootfiletype))
	writetoholo(lf, 1)
end
for i=0,wat-1 do
	wf = assert(io.open(scandirectory .. wfilebase .. i .. lootfiletype))
	writetoholo(wf, 2)
end
for i=0,air-1 do
	af = assert(io.open(scandirectory .. afilebase .. i .. lootfiletype))
	writetoholo(af, 3)
end
